{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///ws (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"html,\\nbody {\\n  height: 100%;\\n}\\n#chatContainer {\\n  height: 90vh !important;\\n  overflow-y: auto;\\n  padding-left: 2vw;\\n  padding-top: 2vh;\\n}\\n.actions{\\n  display: inline-flex;\\n}\\n.container {\\n  border: 2px solid #dedede;\\n  background-color: #f1f1f1;\\n  border-radius: 5px;\\n  padding: 10px;\\n  margin: 10px 0;\\n}\\n.username-input, .message-input{\\n  display: inline-flex;\\n}\\n.container::after {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table;\\n}\\n.time-right {\\n  float: right;\\n  color: #aaa;\\n}\\n.ui.floating.message{\\n  float: left;\\n  width: 75%;\\n  margin-top: 2%;\\n\\n}\\n.ui.info.message{\\n  float: right;\\n  width: 75%;\\n  margin-top: 2%;\\n}\"","module.exports = \"<div>\\n  <div id=\\\"chatContainer\\\">\\n\\n    <div id=\\\"chat\\\">\\n\\n      <div id=\\\"message\\\" *ngFor=\\\"let item of messages.slice().reverse()\\\">\\n\\n        <div *ngIf=\\\"item.clientID === clientID\\\" class=\\\"ui info message\\\">\\n          <h4 class=\\\"messageUser\\\">{{item.un}}</h4>\\n          <p>{{item.msg}}</p>\\n          <span class=\\\"time-right\\\">{{item.timeStamp}}</span>\\n          <br>\\n        </div>\\n\\n        <div *ngIf=\\\"item.clientID !== clientID\\\" class=\\\"ui floating message\\\">\\n          <h4 class=\\\"messageUser\\\">{{item.un}}</h4>\\n          <p>{{item.msg}}</p>\\n          <p>{{item.clientId}}</p>\\n\\n          <span class=\\\"time-right\\\">{{item.timeStamp}}</span>\\n          <br>\\n        </div>\\n\\n      </div>\\n    </div>\\n  </div>\\n\\n  <button class=\\\"ui button yellow create_btn\\\" type=\\\"button\\\" id=\\\"test\\\">Set Username</button>\\n\\n  <div class=\\\"ui modal test\\\">\\n    <i class=\\\"close icon\\\"></i>\\n    <div class=\\\"header\\\">\\n      Welcome to Chatter   \\n    </div>\\n    <div class=\\\"image content\\\">\\n      <div class=\\\"description\\\">\\n        <div class=\\\"ui header\\\">Hello {{username}} </div>\\n        <p>What do you want to be called?</p>\\n        <input class=\\\"ui input\\\" [(ngModel)]=\\\"username\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"actions\\\">\\n      <div class=\\\"ui black button\\\" (click)=\\\"resetUsername()\\\">\\n        Reset username\\n      </div>\\n      <div class=\\\"ui positive right labeled icon button\\\">\\n        Yep, that's me\\n        <i class=\\\"checkmark icon\\\"></i>\\n      </div>\\n    </div>\\n  </div>\\n\\n\\n  <div class=\\\"actions\\\">\\n    <div class=\\\"message-input\\\">\\n      <input [(ngModel)]=\\\"messageText\\\" id=\\\"message_box\\\" placeholder=\\\"type a message\\\" />\\n      <button id=\\\"sendmsg\\\" class=\\\"ui button\\\" (click)=\\\"sendMessage()\\\" type=submit>Send</button>\\n    </div>\\n  </div>\\n</div>\"","import { Component } from \"@angular/core\";\nimport * as io from \"socket.io-client\";\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  messageText: string;\n  messages: Array<any> = [];\n  socket: SocketIOClient.Socket;\n  username = \"\";\n  clientID = \"\";\n  nickname = \"\";\n\n  constructor() {\n    this.socket = io.connect();\n  }\n\n  ngOnInit() {\n    this.messages = new Array();\n    this.listen2Events();\n  }\n\n  listen2Events() {\n    this.socket.on(\"msg\", data => {\n      this.messages.push(data);\n    });\n    this.socket.on(\"getMyId\", data => {\n      this.clientID = data;\n    });\n  }\n  \n  sendMessage() {\n  \n    let sent = {\n      msg: this.messageText,\n      un: this.username,\n      clientId: this.clientID\n    }\n\n    this.socket.emit(\"newMsg\",\n    sent);\n    this.messageText = \"\";\n  }\n\n  resetUsername() {\n    this.username = \"\";\n  }\n\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","/* (ignored) */"],"sourceRoot":""}